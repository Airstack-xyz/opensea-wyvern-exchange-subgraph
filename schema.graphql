# TODO add counters

"""
Entities defined in this file will follow this tempalte:

type ENTITY_NAME @entity {

  "internal id used for indexation"
  id: ID!

  # stored values
  ... Scalar values stored in this entity

  # stored relationships
  ... Relationships from this entity to others

  # derived relationships
  ... Relationships to this entity from others

  # metadata relationships
  ... Stored of derived relationships involving evm metadata entities

  # timeSeries relationships (optional) 
  ... Stored or derived relationships involving time series entities

  # volume relationships (optional) 
  ... Stored or derived relationships involving volume entities


}
"""

# TODO global state entitiy: counters and averages

# "an Account as nft and erc20 holder, buyer, and seller"
type Account @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "account's address"
  address: Bytes

  "evm metada transaction where this account was created"
  createdAt: Transaction!

  "evm metada transaction where this account was updated"
  lastUpdatedAt: Transaction!

  # derived relationships

  "balances in this account scop"
  balances: [Balance!]! @derivedFrom(field: "account")

  "erc20 deposits"
  incomingErc20Transaction: [Erc20Transaction!]! @derivedFrom(field: "to")

  "erc20 transfers"
  outgoingErc20Transaction: [Erc20Transaction!]! @derivedFrom(field: "from")

  "owned nfts"
  nfts: [Nft!]! @derivedFrom(field:"owner")

  "revcieved"
  incomingNftTransaction: [NftTransaction!]! @derivedFrom(field: "to")

  "sent nfts"
  outgoingErc20Transaction: [NftTransaction!]! @derivedFrom(field: "from")

  "orders that were made by this account"
  makerOrders: [Order!]! @derivedFrom(field: "maker")
  
  "orders that were taken by this account"
  takerOrders: [Order!]! @derivedFrom(field: "taker")

}

# "a Balance as a many to many relationship between erc20 tokens and accounts"
type Balance @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "token's amount"
  amount: BigInt!

  # stored relationships

  "balance's owner"
  account: Account!

  "related token"
  token: Erc20Token!

  # derived relationships

  "erc20Transactions that increased this balance"
  increasingTransactions: [Erc20Transaction!]! @derivedFrom(field: "increasedBalance")

  "erc20Transactions that decreased this balance"
  decreasingTransactions: [Erc20Transaction!]! @derivedFrom(field: "decreasedBalance")
}

# "an Erc20Token as payment token for a sale"
type Erc20Token @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "asset contract's address"
  address: Bytes

  # derived relationships

  "related balances"
  balances: [Balance!]! @derivedFrom(field: "token")
  
  "related transactions"
  erc20Transactions: [Erc20Transaction!]! @derivedFrom(field: "token")

  "related sales"
  sales: [Sale!]! @derivedFrom(field: "token")

  "all the orders where this token was used to pay"
  orders: [Order!]! @derivedFrom(field: "paymentToken")

  # volume relationships

  "related list of minuteVolume entities for each nft contract in which this token was paymentToken"
  minuteVolumes: [MinuteVolume!]! @derivedFrom(field: "erc20Token")
  
  "related list of hourVolume entities for each nft contract in which this token was paymentToken"
  hourVolumes: [HourVolume!]! @derivedFrom(field: "erc20Token")

  "related list of dayVolume entities for each nft contract in which this token was paymentToken"
  dayVolumes: [DayVolume!]! @derivedFrom(field: "erc20Token")

  "related list of dayVolume entities for each nft contract in which this token was paymentToken"
  weekVolumes: [WeekVolume!]! @derivedFrom(field: "erc20Token")

}

# "A transaction of a erc20Token as payment for a sale"
type Erc20Transaction @entity{
  "Internal ID used for indexation"
	id: ID!

  # stored values

  "event timestamp"
	timestamp: BigInt!

  "amount of the transaction"
  amount: BigInt!

  # stored relationships

  "Account sending the value"
  from: Account!

  "Account receiving the value"
  to: Account!

  "related token"
  token: Erc20Token!

  "Balance entity that increased it funds"
  increasedBalance: Balance!

  "Balance entity that decreaced it funds"
  decreasedBalance: Balance!

  "related sale"
  sale: Sale!

  # metadata relationships

  "related block"
  block: Block!

  "related transaction"
  transaction: Transaction!

  # time series relationships

  "related minute entity"
  minute: Minute!
  
  "related hour entity"
  hour: Hour!

  "related day entity"
  day: Day!

  "related week entity"
  week: Week!

  # volume relationships

  "related minuteVolume entity"
  minuteVolume: MinuteVolume!
  
  "related hourVolume entity"
  hourVolume: HourVolume!

  "related dayVolume entity"
  dayVolume: DayVolume!

  "related weekVolume entity"
  weekVolume: WeekVolume!

}

type Nft @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "token's id inside the token"
  tokenId: BigInt

  # stored relationships

  "related nft contract"
  contract: NftContract!

  "Account which owns an asset"
  owner: Account!

  # derived relationships

  "related transactions"
  nftTransactions: [NftTransaction!]! @derivedFrom(field: "nft")

  # TODO "related sales"
  # sales: [Sale!]! @derivedFrom(field: "nft")
}

type NftContract @entity { 
  "internal id used for indexation"
  id: ID!

  # stored values

  "asset contract's address"
  address: Bytes

  # derived relationships

  # "all the orders where this asset was traded"
  # orders: [Order!]! @derivedFrom(field: "target")

  # nfts contained in this contract
  nfts: [Nft!]! @derivedFrom(field: "contract")

  # TODO related sales
  # sales: [Sale!]! @derivedFrom(field: "contract")
  

  # volume relationships

  "related list of minuteVolume entities for each erc20Token that paid for an NFT from this contract"
  minuteVolumes: [MinuteVolume!]! @derivedFrom(field: "nftContract")
  
  "related list of hourVolume entities for each erc20Token that paid for an NFT from this contract"
  hourVolumes: [HourVolume!]! @derivedFrom(field: "nftContract")

  "related list of dayVolume entities for each erc20Token that paid for an NFT from this contract"
  dayVolumes: [DayVolume!]! @derivedFrom(field: "nftContract")

  "related list of dayVolume entities for each erc20Token that paid for an NFT from this contract"
  weekVolumes: [WeekVolume!]! @derivedFrom(field: "nftContract")

}

type NftTransaction @entity {
  "Internal ID used for indexation"
	id: ID!

  # stored values

  "event timestamp"
	timestamp: BigInt!

  # stored relationships

  "Account sending the value"
  from: Account!

  "Account receiving the value"
  to: Account!

  "related token"
  nft: Nft!

  "related sale"
  sale: Sale!

  # metadata relationships

  "related evm block"
  block: Block!

  "related evm transaction"
  transaction: Transaction!

  # time series relationships

  "related minute entity"
  minute: Minute!
  
  "related hour entity"
  hour: Hour!

  "related day entity"
  day: Day!

  "related week entity"
  week: Week!

  # volume relationships

  "related minuteVolume entity"
  minuteVolume: MinuteVolume!
  
  "related hourVolume entity"
  hourVolume: HourVolume!

  "related dayVolume entity"
  dayVolume: DayVolume!

  "related weekVolume entity"
  weekVolume: WeekVolume!

}

# "A Sale is the relationship between matched orders"
type Sale @entity {

  "internal id used for indexation"
  id: ID!

  # stored relationships

  "payment token for this sale"
  token: Erc20Token

  # metadata relationships

  "related evm block"
  block: Block!

  "related evm transaction"
  transaction: Transaction!
 
  # derived relationships

  "Nft transfers made for this sell"
  nftTransactions: [NftTransaction!]! @derivedFrom(field:"sale")

  "the payment for this sale"
  erc20Transaction: Erc20Transaction @derivedFrom(field:"sale")

  "Orders that made this Sale, must be a 2 entries array, one Buy Order and one Sell Order"
  orders: [Order!]! @derivedFrom(field: "sale")

  # time series relationships

  "related minute entity"
  minute: Minute!
  
  "related hour entity"
  hour: Hour!

  "related day entity"
  day: Day!

  "related week entity"
  week: Week!

  # volume relationships

  "related minuteVolume entity"
  minuteVolume: MinuteVolume!
  
  "related hourVolume entity"
  hourVolume: HourVolume!

  "related dayVolume entity"
  dayVolume: DayVolume!

  "related weekVolume entity"
  weekVolume: WeekVolume!

}


# enum ContractOrderYieldStatus {
#   NONE
#   PART_ONE
#   PART_TWO
# }

# enum OrderStatus {
#   NONE
#   OPEN
#   FILLED
# }

enum FeeMethod { 
  ProtocolFee
  SplitFee
}

enum Side { 
  Buy
  Sell
}

enum SaleKind {
  FixedPrice
  DutchAuction
}

enum HowToCall {
  Call
  DelegateCall
}


type Order @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  # "current data yield status as thrown by contract"
  # yieldStatus: ContractOrderYieldStatus!

  # status: OrderStatus!

  "hased order content"
  hash: Bytes

  "Current contract exchange (fixed to 0x7be8076f4ea4a4ad08075c2508e481d6c946d12b, opensea wyvern address)"
  exchange: Bytes


  "maker fee for relayer"
  makerRelayerFee: BigInt

  "maker fee for protocol"
  makerProtocolFee: BigInt

  "taker fee for relayer"
  takerRelayerFee: BigInt

  "taker fee for protocol"
  takerProtocolFee: BigInt

  "Order fee recipient or zero address for taker order."
  feeRecipient: Account

  "Fee method (protocolfee or split fee)"
  feeMethod: FeeMethod

  "side: Is it buy or sell"
  side: Side

  "salkind: is it FixedPrice or DutchAuction"
  saleKind: SaleKind

  "Base price of the order (in paymentTokens). "
  basePrice: BigInt

  "Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. "
  extra: BigInt

  "Listing start timestamp"
  listingTime: BigInt

  "Expiration timestamp - 0 for no expiry"
  expirationTIme: BigInt

  "Order salt, used to prevent duplicate hashes."
  salt: BigInt

  "Should be included in order book"
  orderbookInclusionDesired: Boolean

  "was this order canceled"
  cancelled: Boolean

  "Which kind of call enum"
  howToCall: HowToCall

  "additionl order call data"
  callData: Bytes

  "Calldata replacement pattern, or an empty byte array for no replacement."
  replacementPattern: Bytes
  
  "Static call target, zero-address for no static call."
  staticTarget: Bytes

  "Static call extra data"
  staticExtradata: Bytes

  "NFT contract address"
  target: Bytes!

  # stored relationships

  "the Sale where this order was involved"
  sale: Sale!

  "Account who made this order"
  maker: Account

  "Account who took this order"
  taker: Account

  "Erc20Token used to pay for the order, or the zero-address as a sentinel value for Ether."
  paymentToken: Erc20Token!

  # nftTransactions: [NftTransaction!]! @derivedFrom(field: "order")

  # "related transaction if closed"
  # erc20Transaction: Erc20Transaction @derivedFrom(field: "order")

  # metadata relationships

  "related block"
  block: Block!

  "related transaction"
  transaction: Transaction!

  # time series relationships

  "related minute entity"
  minute: Minute!
  
  "related hour entity"
  hour: Hour!

  "related day entity"
  day: Day!

  "related week entity"
  week: Week!

  # time series relationships

  "related minuteVolume entity"
  minuteVolume: MinuteVolume!
  
  "related hourVolume entity"
  hourVolume: HourVolume!

  "related dayVolume entity"
  dayVolume: DayVolume!

  "related weekVolume entity"
  weekVolume: WeekVolume!

}


##

# events and metadata entities

##

interface Metadata {
	"Internal ID used for indexation"
	id: ID!
}


type Block implements Metadata @entity {
	"Internal ID used for indexation"
	id: ID!

	"event timestamp"
	timestamp: BigInt!	
	
	"Block's number"
  number: BigInt!

	"Chain transactions info"
	transactions: [Transaction!] @derivedFrom(field: "block")

	"Orders created on this block"
	orders: [Order!] @derivedFrom(field: "block")

  "related minute entity"
  minute: Minute
  
  "related hour entity"
  hour: Hour

  "related day entity"
  day: Day

  "related week entity"
  week: Week

}

type Transaction implements Metadata @entity {
	"Internal ID used for indexation"
	id: ID!

	"Transaction's Block"
	block: Block!

	"Transaction's hash"
	hash: Bytes
  
	"Sender Address"
	from: Bytes

	"Transaction's gas price"
  gasPrice: BigInt

  "Order created on this Transaction"
	order: Order

  # time series relationships

  "related minute entity"
  minute: Minute
  
  "related hour entity"
  hour: Hour

  "related day entity"
  day: Day

  "related week entity"
  week: Week
}


##

# Volumes

##
"""
A volume entity relates to
- one time serie entity 
- one erc20Token
- one nftContract
- Many erc20tx 
- Many nftTx
"""
interface Volume {
  "internal id used for indexation"
  id: ID! # Set to `timeUnitName-${nftContract.id}-${erc20Token-id}-${epoch}`

  # stored values

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20Amount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftAmount: BigInt!

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20TransactionAmount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftTransactionAmount: BigInt!

  # stored relationships

  "related erc20Token"
  erc20Token: Erc20Token!

  "related nftContract"
  nftContract: NftContract!

  "related time serie entitiy, ej dailyVolume for x day is related to x dayCandle"
  timeUnit: TimeUnit!

  # derived relationships

  "a list of erc20Transactions"
  erc20Transactions: [Erc20Transaction!]!

  "a list of nftTransactions"
  nftTransactions: [NftTransaction!]!
}

type MinuteVolume implements Volume @entity {
  "internal id used for indexation"
  id: ID! # Set to `timeUnitName-${nftContract.id}-${erc20Token-id}-${epoch}`

  # stored values

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20Amount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftAmount: BigInt!

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20TransactionAmount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftTransactionAmount: BigInt!

  # stored relationships

  "related erc20Token"
  erc20Token: Erc20Token!

  "related nftContract"
  nftContract: NftContract!

  "related time serie entitiy, ej dailyVolume for x day is related to x dayCandle"
  timeUnit: TimeUnit!

  # derived relationships

  "a list of erc20Transactions"
  erc20Transactions: [Erc20Transaction!]! @derivedFrom(field:"minuteVolume")

  "a list of nftTransactions"
  nftTransactions: [NftTransaction!]!@derivedFrom(field:"minuteVolume")
}

type HourVolume implements Volume @entity {
  "internal id used for indexation"
  id: ID! # Set to `timeUnitName-${nftContract.id}-${erc20Token-id}-${epoch}`

  # stored values

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20Amount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftAmount: BigInt!

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20TransactionAmount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftTransactionAmount: BigInt!

  # stored relationships

  "related erc20Token"
  erc20Token: Erc20Token!

  "related nftContract"
  nftContract: NftContract!

  "related time serie entitiy, ej dailyVolume for x day is related to x dayCandle"
  timeUnit: TimeUnit!

  # derived relationships

  "a list of erc20Transactions"
  erc20Transactions: [Erc20Transaction!]! @derivedFrom(field:"hourVolume")

  "a list of nftTransactions"
  nftTransactions: [NftTransaction!]!@derivedFrom(field:"hourVolume")
}

type DayVolume implements Volume @entity {
  "internal id used for indexation"
  id: ID! # Set to `timeUnitName-${nftContract.id}-${erc20Token-id}-${epoch}`

  # stored values

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20Amount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftAmount: BigInt!

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20TransactionAmount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftTransactionAmount: BigInt!

  # stored relationships

  "related erc20Token"
  erc20Token: Erc20Token!

  "related nftContract"
  nftContract: NftContract!

  "related time serie entitiy, ej dailyVolume for x day is related to x dayCandle"
  timeUnit: TimeUnit!

  # derived relationships

  "a list of erc20Transactions"
  erc20Transactions: [Erc20Transaction!]! @derivedFrom(field:"dayVolume")

  "a list of nftTransactions"
  nftTransactions: [NftTransaction!]!@derivedFrom(field:"dayVolume")
}

type WeekVolume implements Volume @entity {
  "internal id used for indexation"
  id: ID! # Set to `timeUnitName-${nftContract.id}-${erc20Token-id}-${epoch}`

  # stored values

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20Amount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftAmount: BigInt!

  "amount of some erc20 token traded for this nft contract in a given time frame"
  erc20TransactionAmount: BigInt!

  "amount of some nfts traded for this nft contract in a given time frame"
  nftTransactionAmount: BigInt!

  # stored relationships

  "related erc20Token"
  erc20Token: Erc20Token!

  "related nftContract"
  nftContract: NftContract!

  "related time serie entitiy, ej dailyVolume for x day is related to x dayCandle"
  timeUnit: TimeUnit!

  # derived relationships

  "a list of erc20Transactions"
  erc20Transactions: [Erc20Transaction!]! @derivedFrom(field:"weekVolume")

  "a list of nftTransactions"
  nftTransactions: [NftTransaction!]!@derivedFrom(field:"weekVolume")
}



##

# Time series

##

interface TimeUnit {
  "internal id used for indexation"
  id: ID!

  "timestamp division of the starting point"
  epoch: BigInt!

  "orders filled at this time candle"
  orders: [Order!]!

  "blocks signed at this thime candle"
  blocks: [Block!]

  "transactions created at this thime candle"
  transactions: [Transaction!]!

  "related volume entity"
  volume: Volume!
}

type Minute implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "timestamp division of the starting point"
  epoch: BigInt!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "minute")

  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "minute")

  "transactions created at this thime candle"
  transactions: [Transaction!]! @derivedFrom(field: "minute")

  "related volume entity"
  volume: Volume! @derivedFrom(field: "timeUnit")
}

type Hour implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "timestamp division of the starting point"
  epoch: BigInt!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "hour")
  
  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "hour")

  "transactions created at this thime candle"
  transactions: [Transaction!]! @derivedFrom(field: "hour")

  "related volume entity"
  volume: Volume! @derivedFrom(field: "timeUnit")
}

type Day implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "timestamp division of the starting point"
  epoch: BigInt!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "day")
  
  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "day")

  "transactions created at this thime candle"
  transactions: [Transaction!]! @derivedFrom(field: "day")

  "related volume entity"
  volume: Volume! @derivedFrom(field: "timeUnit")
}

type Week implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "timestamp division of the starting point"
  epoch: BigInt!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "week")

  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "week")

  "transactions created at this thime candle"
  transactions: [Transaction!]! @derivedFrom(field: "week")

  "related volume entity"
  volume: Volume! @derivedFrom(field: "timeUnit")
}
