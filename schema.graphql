interface Metadata {
	"Internal ID used for indexation"
	id: ID!
}

interface Event implements Metadata @entity {
  "Internal ID used for indexation"
	id: ID!

  "event timestamp"
	timestamp: BigInt!
}

type OrderApprovedPartOne implements Event @entity {
  "Internal ID used for indexation"
	id: ID!

  "event timestamp"
	timestamp: BigInt!

  "related block"
  block: Block

  "related transaction"
  transaction: Transaction

  "related order"
  order: Order

  "related minute entity"
  minute: Minute
  
  "related hour entity"
  hour: Hour

  "related day entity"
  day: Day

  "related week entity"
  week: Week
}

type Block implements Metadata @entity {
	"Internal ID used for indexation"
	id: ID!

	"event timestamp"
	timestamp: BigInt!	
	
	"Block's number"
  number: BigInt!

	"Chain transactions info"
	transactions: [Transaction!] @derivedFrom(field: "block")

	"Orders created on this block"
	orders: [Order!] @derivedFrom(field: "block")

  "related minute entity"
  minute: Minute
  
  "related hour entity"
  hour: Hour

  "related day entity"
  day: Day

  "related week entity"
  week: Week

}

type Transaction implements Metadata @entity {
	"Internal ID used for indexation"
	id: ID!

	"Transaction's Block"
	block: Block!

	"Transaction's hash"
	hash: Bytes

	"Sender Address"
	from: Bytes

	"Transaction's gas price"
  gasPrice: BigInt

  "Orders created on this Transaction"
	orders: [Order!] @derivedFrom(field: "transaction")

  # time series relationships

  "related minute entity"
  minute: Minute
  
  "related hour entity"
  hour: Hour

  "related day entity"
  day: Day

  "related week entity"
  week: Week
}

##

# Time series

##

interface TimeUnit {
  "internal id used for indexation"
  id: ID!

  "orders filled at this time candle"
  orders: [Order!]!

  "blocks signed at this thime candle"
  blocks: [Block!]
}

type Minute implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "minute")

  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "minute")

  "transactions created at this thime candle"
  transactions: [Transaction!] @derivedFrom(field: "minute")
}

type Hour implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "hour")
  
  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "hour")

  "transactions created at this thime candle"
  transactions: [Transaction!] @derivedFrom(field: "hour")
}

type Day implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "day")
  
  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "day")

  "transactions created at this thime candle"
  transactions: [Transaction!] @derivedFrom(field: "day")
}
type Week implements TimeUnit @entity {
  "internal id used for indexation"
  id: ID!

  "orders filled at this time candle"
  orders: [Order!]! @derivedFrom(field: "week")

  "blocks signed at this thime candle"
  blocks: [Block!] @derivedFrom(field: "week")

  "transactions created at this thime candle"
  transactions: [Transaction!] @derivedFrom(field: "week")
}

enum OrderStatus {
  NONE
  PART_ONE
  PART_TWO
  PART_THREE
}

enum FeeMethod { 
  ProtocolFee
  SplitFee
}

enum Side { 
  Buy
  Sell
}

enum SaleKind {
  FixedPrice
  DutchAuction
}

enum HowToCall {
  Call
  DelegateCall
}



type Order @entity {
  "internal id used for indexation"
  id: ID!

  "current data yield status"
  status: OrderStatus!

  "hased order content"
  hash: Bytes

  "Current contract exchange (fixed to 0x7be8076f4ea4a4ad08075c2508e481d6c946d12b, opensea wyvern address)"
  exchange: Bytes

  "Account who made this order"
  maker: Account

  "Account who took this order"
  taker: Account

  "maker paid fee for relayer"
  makerRelayerFee: BigInt

  "maker paid fee for protocol"
  makerProtocolFee: BigInt

  "taker paid fee for relayer"
  takerRelayerFee: BigInt

  "taker paid fee for protocol"
  takerProtocolFee: BigInt

  "Order fee recipient or zero address for taker order."
  feeRecipient: Account

  "Fee method (protocolfee or split fee)"
  feeMethod: FeeMethod

  "side: Is it buy or sell"
  side: Side

  "salkind: is it FixedPrice or DutchAuction"
  saleKind: SaleKind

  "NFT contract address"
  target: Asset

  "Which kind of call enum"
  howToCall: HowToCall

  "additionl order call data"
  callData: Bytes

  "Calldata replacement pattern, or an empty byte array for no replacement."
  replacementPattern: Bytes
  
  "Static call target, zero-address for no static call."
  staticTarget: Bytes

  "Static call extra data"
  staticExtradata: Bytes

  "Token used to pay for the order, or the zero-address as a sentinel value for Ether."
  paymentToken: Token

  "Base price of the order (in paymentTokens). "
  basePrice: BigInt

  "Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. "
  extra: BigInt

  "Listing timestamp"
  listingTime: BigInt

  "Expiration timestamp - 0 for no expiry"
  expirationTIme: BigInt

  "Order salt, used to prevent duplicate hashes."
  salt: BigInt

  "Should be included in order book"
  orderbookInclusionDesired: Boolean

  "was this order canceled"
  cancelled: Boolean

  # time series relationships

  "related minute entity"
  minute: Minute
  
  "related hour entity"
  hour: Hour

  "related day entity"
  day: Day

  "related week entity"
  week: Week

  "related block"
  block: Block

  "related transaction"
  transaction: Transaction
}

type Account @entity {
  "internal id used for indexation"
  id: ID!

  "account's address"
  address: Bytes

  "orders that were made by this account"
  makerOrders: [Order!]! @derivedFrom(field: "maker")
  
  "orders that were taken by this account"
  takerOrders: [Order!]! @derivedFrom(field: "taker")

  "balances in this account scop"
  balances: [Balance!]! @derivedFrom(field: "account")

  "evm metada transaction where this account was created"
  createdAt: Transaction!

  "evm metada transaction where this account was updated"
  lastUpdatedAt: Transaction!
}

type Asset @entity { 
  "internal id used for indexation"
  id: ID!

  "asset contract's address"
  address: Bytes

  "all the orders where this asset was traded"
  orders: [Order!]! @derivedFrom(field: "target")

}
interface Erc20Toekn {
  "internal id used for indexation"
  id: ID!

  "asset contract's address"
  address: Bytes
}

type Token implements Erc20Toekn @entity {
  "internal id used for indexation"
  id: ID!

  "asset contract's address"
  address: Bytes

  "all the orders where this token was used to pay"
  orders: [Order!]! @derivedFrom(field: "paymentToken")

}

type Balance @entity {
  "internal id used for indexation"
  id: ID!

  "balance's owner"
  account: Account!

  "related token"
  token: Token!

  "token's amount"
  amount: BigInt!
}