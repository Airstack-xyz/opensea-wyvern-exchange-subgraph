# TODO add counters

"""
Entities defined in this file will follow this tempalte:

type ENTITY_NAME @entity {

  "internal id used for indexation"
  id: ID!

  # stored values
  ... Scalar values stored in this entity

  # stored relationships
  ... Relationships from this entity to others

  # derived relationships
  ... Relationships to this entity from others

  # metadata relationships
  ... Stored of derived relationships involving evm metadata entities

  # timeSeries relationships (optional) 
  ... Stored or derived relationships involving time series entities

  # volume relationships (optional) 
  ... Stored or derived relationships involving volume entities


}
"""

# TODO global state entitiy: counters and averages

type GlobalState @entity {
 "internal id used for indexation"
  id: ID!

  counters: EntityCounter!

  accounts: EntityCounter!

  erc20tokens: EntityCounter!

  erc20transactions: EntityCounter!

  nfts: EntityCounter!

  nftContracts: EntityCounter!

  nftTransactions: EntityCounter!

  sales: EntityCounter!

  orders: EntityCounter!

  blocks: EntityCounter!

  transactions: EntityCounter!
}

type EntityCounter @entity {
 "internal id used for indexation"
  id: ID!

  # stored values

  "the name of the entity it's being counted"
  name: String

  "amount of entities"
  amount: BigInt!
}


# "an Account as nft and erc20 holder, buyer, and seller"
type Account @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "account's address"
  address: Bytes

  "evm metada transaction where this account was created"
  createdAt: Transaction!

  "evm metada transaction where this account was updated"
  lastUpdatedAt: Transaction!

  # derived relationships

  "erc20 deposits"
  incomingErc20Transactions: [Erc20Transaction!]! @derivedFrom(field: "to")

  "erc20 transfers"
  outgoingErc20Transactions: [Erc20Transaction!]! @derivedFrom(field: "from")

  "owned nfts"
  nfts: [Nft!]! @derivedFrom(field:"owner")

  "revcieved"
  incomingNftTransactions: [NftTransaction!]! @derivedFrom(field: "to")

  "sent nfts"
  outgoingNftTransactions: [NftTransaction!]! @derivedFrom(field: "from")

  "orders that were made by this account"
  makerOrders: [Order!]! @derivedFrom(field: "maker")
  
  "orders that were taken by this account"
  takerOrders: [Order!]! @derivedFrom(field: "taker")

}

interface SmartContract {
   "internal id used for indexation"
  id: ID!

  # stored values

  "asset contract's address"
  address: Bytes

  # derived relationships

  "related transactions"
  tokenTransactions: [SmartContractTransaction!]!

  "all the orders where this asset was traded"
  orders: [Order!]!
}

# "an Erc20Token as payment token for a sale"
type Erc20Token implements SmartContract @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "asset contract's address"
  address: Bytes

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  # derived relationships
  
  "related transactions"
  tokenTransactions: [SmartContractTransaction!]! @derivedFrom(field: "contract")

  "related sales"
  sales: [Sale!]! @derivedFrom(field: "token")

  "all the orders where this token was used to pay"
  orders: [Order!]! @derivedFrom(field: "paymentToken")
}

interface SmartContractTransaction {
  "Internal ID used for indexation"
	id: ID!

  # stored values

  "event timestamp"
	timestamp: BigInt!

  # stored relationships

  "Account sending the value"
  from: Account!

  "Account receiving the value"
  to: Account!

  "related SmartContract"
  contract: SmartContract!


  "related sale"
  sale: Sale!

  # metadata relationships

  "related block"
  block: Block!

  "related transaction"
  transaction: Transaction!

}

# "A transaction of a erc20Token as payment for a sale"
type Erc20Transaction implements SmartContractTransaction @entity{
  "Internal ID used for indexation"
	id: ID!

  # stored values

  "event timestamp"
	timestamp: BigInt!

  "amount of the transaction"
  amount: BigInt!

  # stored relationships

  "Account sending the value"
  from: Account!

  "Account receiving the value"
  to: Account!

  "related SmartContract, a Erc20Token entity in this case"
  contract: SmartContract! 

  "related sale"
  sale: Sale!

  # metadata relationships

  "related block"
  block: Block!

  "related transaction"
  transaction: Transaction!
}

type Nft @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  "token's id inside the token"
  tokenId: BigInt

  "Token URI"
  tokenURI: String

  # stored relationships

  "related nft contract"
  contract: NftContract!

  "Account which owns an asset"
  owner: Account!

  # derived relationships

  "related transactions"
  nftTransactions: [NftTransaction!]! @derivedFrom(field: "nft")

  # TODO "related sales"
  # sales: [Sale!]! @derivedFrom(field: "nft")
}

type NftContract implements SmartContract @entity { 
  "internal id used for indexation"
  id: ID!

  # stored values

  "asset contract's address"
  address: Bytes

  "Name of contract" 
  name: String

  "Symbol of contract"
  symbol: String

  # derived relationships

  "related transactions"
  tokenTransactions: [SmartContractTransaction!]! @derivedFrom(field: "contract")

  # TODO related sales
  # sales: [Sale!]! @derivedFrom(field: "contract")

  "all the orders where this asset was traded"
  orders: [Order!]! @derivedFrom(field: "target")

  # nfts contained in this contract
  nfts: [Nft!]! @derivedFrom(field: "contract")

}

type NftTransaction implements SmartContractTransaction @entity {
  "Internal ID used for indexation"
	id: ID!

  # stored values

  "event timestamp"
	timestamp: BigInt!

  # stored relationships

  "Account sending the value"
  from: Account!

  "Account receiving the value"
  to: Account!

  "Value of transaction in USD"
  valueInUSD: BigDecimal!

  "amount paid"
  amount: BigDecimal!

  "related SmartContract, a NftContract entity in this case"
  contract: SmartContract! 

  "related token"
  nft: Nft!

  "related sale"
  sale: Sale!

  # metadata relationships

  "related evm block"
  block: Block!

  "related evm transaction"
  transaction: Transaction!

  dailyNFTTransfer: DailyNFTTransfer!

}

# "A Sale is the relationship between matched orders"
type Sale @entity {

  "internal id used for indexation"
  id: ID!

  # stored relationships

  "payment token for this sale"
  token: Erc20Token

  # derived relationships

  "Nft transfers made for this sell"
  nftTransactions: [NftTransaction!]! @derivedFrom(field:"sale")

  "the payment for this sale"
  erc20Transaction: Erc20Transaction @derivedFrom(field:"sale")

  "Orders that made this Sale, must be a 2 entries array, one Buy Order and one Sell Order"
  orders: [Order!]! @derivedFrom(field: "sale")

  # metadata relationships

  "related evm block"
  block: Block!

  "related evm transaction"
  transaction: Transaction!
  
}


# enum ContractOrderYieldStatus {
#   NONE
#   PART_ONE
#   PART_TWO
# }

# enum OrderStatus {
#   NONE
#   OPEN
#   FILLED
# }

enum FeeMethod { 
  ProtocolFee
  SplitFee
}

enum Side { 
  Buy
  Sell
}

enum SaleKind {
  FixedPrice
  DutchAuction
}

enum HowToCall {
  Call
  DelegateCall
}


type Order @entity {
  "internal id used for indexation"
  id: ID!

  # stored values

  # "current data yield status as thrown by contract"
  # yieldStatus: ContractOrderYieldStatus!

  # status: OrderStatus!

  "hased order content"
  hash: Bytes

  "Current contract exchange (fixed to 0x7be8076f4ea4a4ad08075c2508e481d6c946d12b, opensea wyvern address)"
  exchange: Bytes


  "maker fee for relayer"
  makerRelayerFee: BigInt

  "maker fee for protocol"
  makerProtocolFee: BigInt

  "taker fee for relayer"
  takerRelayerFee: BigInt

  "taker fee for protocol"
  takerProtocolFee: BigInt

  "Order fee recipient or zero address for taker order."
  feeRecipient: Account

  "Fee method (protocolfee or split fee)"
  feeMethod: FeeMethod

  "side: Is it buy or sell"
  side: Side

  "salkind: is it FixedPrice or DutchAuction"
  saleKind: SaleKind

  "Base price of the order (in paymentTokens). "
  basePrice: BigInt

  "Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. "
  extra: BigInt

  "Listing start timestamp"
  listingTime: BigInt

  "Expiration timestamp - 0 for no expiry"
  expirationTIme: BigInt

  "Order salt, used to prevent duplicate hashes."
  salt: BigInt

  "Should be included in order book"
  orderbookInclusionDesired: Boolean

  "was this order canceled"
  cancelled: Boolean

  "Which kind of call enum"
  howToCall: HowToCall

  "additionl order call data"
  callData: Bytes

  "Calldata replacement pattern, or an empty byte array for no replacement."
  replacementPattern: Bytes
  
  "Static call target, zero-address for no static call."
  staticTarget: Bytes

  "Static call extra data"
  staticExtradata: Bytes

  "NFT contract address"
  target: NftContract!

  # stored relationships

  "the Sale where this order was involved"
  sale: Sale!

  "Account who made this order"
  maker: Account

  "Account who took this order"
  taker: Account

  "Erc20Token used to pay for the order, or the zero-address as a sentinel value for Ether."
  paymentToken: Erc20Token!

  # nftTransactions: [NftTransaction!]! @derivedFrom(field: "order")

  # "related transaction if closed"
  # erc20Transaction: Erc20Transaction @derivedFrom(field: "order")

  # metadata relationships

  "related block"
  block: Block!

  "related transaction"
  transaction: Transaction!

}


##

# events and metadata entities

##

interface Metadata {
	"Internal ID used for indexation"
	id: ID!
}


type Block implements Metadata @entity {
	"Internal ID used for indexation"
	id: ID!

	"event timestamp"
	timestamp: BigInt!	
	
	"Block's number"
  number: BigInt!

	"Chain transactions info"
	transactions: [Transaction!] @derivedFrom(field: "block")

	"Orders created on this block"
	orders: [Order!] @derivedFrom(field: "block")

}

type Transaction implements Metadata @entity {
	"Internal ID used for indexation"
	id: ID!

	"Transaction's Block"
	block: Block!

	"Transaction's hash"
	hash: Bytes
  
	"Sender Address"
	from: Bytes

	"Transaction's gas price"
  gasPrice: BigInt

  "Order created on this Transaction"
	order: Order

}



type DailyNFTTransfer @entity {
id: ID! 
"Daily Count of transaction for a NFT collection"
count: BigInt! 
"NFT contract address"
nft: NftContract!

"Total daily volume in USD"
volumeInUSD: BigDecimal!

"NFT transaction for this day"
nftTransactions: [NftTransaction!]! @derivedFrom(field: "dailyNFTTransfer")

"Day count since start of unixtime"
daySinceEpoch: String!

"Unix timestamp of start of the day"
startDayTimestamp: BigInt

"Concatenation of day and count of NFT transfer"
orderCount: String!

"Concatenation of day and USD volume of NFT transfer"
orderUSDVolume: String
}


